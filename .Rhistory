survey<- read.table("http://www.andrew.cmu.edu/user/achoulde/94842/data/survey_data.csv)
##### Question 2#####
survey<- read.table("http://www.andrew.cmu.edu/user/achoulde/94842/data/survey_data.csv")
##### Question 2#####
survey<- read.table("http://www.andrew.cmu.edu/user/achoulde/94842/data/survey_data.csv", header = TRUE, sep = ",")
View(survey)
## a ##
sum(survey$Program=="MISM"|survey$Program=="other")
## b ##
per<-sum(survey$Program=="PPM")/sum(survey$Program)
## b ##
per<-sum(survey$Program=="PPM")/(sum(survey$Program))
## b ##
per<-sum(survey$Program=="PPM")/(nrow(survey$Program))
per
## b ##
per<-sum(survey$Program=="PPM")/nrow(survey$Program)
per
## b ##
per=sum(survey$Program=="PPM")/nrow(survey$Program)
per
## b ##
per<-sum(survey$Program=="PPM")/nrow(survey)
per
## e ##
OperatingSystem3 <- survey[,4]
install.packages("gapminder")
library(gapminder)
gapminder
table(gapminder)
gp<-gapminder
table
table(gp)
gp
gp$continent
outer_func<-function(){
a<-20
inner_func<-function(){
a<-30
print(a)
}
inner_func()
print(a)
}
outer_func()
priceCalculator <- function(hours, pph=40){
net.price <- hours * pph
round(net.price)
}
cat("A vat rate of 8% is applied ."," The total ←-
price is",price * 1.08)
price<-10
cat("A vat rate of 8% is applied ."," The total ←-
price is",price * 1.08)
x<-1:4
l<-list()
l
for(i in x){
list[[i]]<-i*i
}
for(i in x){
l[[i]]<-i*i
}
l
mat<-matrix(data = seq(10, 20, by=1), nrow = 6, ncol = 2)
mat
for(r in 1:nrow(mat))
for(c in 1:ncol(mat))
print(paste("row", r, "and column", c, "have the value", mat[r,c]))
x <- seq(from=50, to=200, by=20)
x
x[x<150]
sum(x[x<150])
df <- read.csv("https://raw.githubusercontent.com/guru99-edu/R-Programming/master/travel_times.csv")
df
head(df)
filter(df, df$GoingTo=="Home", df$DayOfWeek=="Wednesday")
filter(df, GoingTo=="Home", DayOfWeek=="Wednesday")
filter(df, GoingTo=="Home", DayOfWeek=="Friday")
filter(df, GoingTo=="Home"&DayOfWeek=="Friday")
filter(df, GoingTo=="Home" & DayOfWeek=="Friday")
filter (df , GoingTo == " Home " &
DayOfWeek == " Wednesday ")
filter(df, GoingTo=="Home", DayOfWeek="Friday")
filter(df, GoingTo=="Home", DayOfWeek=="Friday")
df
head(df)
glimpse(df)
glimpse(df)
library(dplyr)
glimpse(df)
filter(df, GoingTo=="Home", DayOfWeek=="Friday")
select(df, DayOfWeek=="Friday", GoingTo=="Home")
select(df, DayOfWeek=="Friday"&GoingTo=="Home")
select(df, DayOfWeek=="Friday"&GoingTo=="Home")
select(df, DayOfWeek=="Friday")
select(df, GoingTo=="Home")
select(df, GoingTo)
select(df, GoingTo, DayOfWeek)
select(df, GoingTo=="Home")
filter(df, DayOfWeek=="Friday", GoingTo=="Home")
dim(filter(df, DayOfWeek=="Friday", GoingTo=="Home"))
dim(filter(df, DayOfWeek=="Friday", GoingTo=="Home"))[1]
filter(df, DayOfWeek=="Friday")
friday <- filter(df, DayOfWeek=="Friday")
friday$Distance
mean(friday$Distance)
arrange(friday, Distance)
a-friday <- arrange(friday, Distance)
afriday <- arrange(friday, Distance)
afriday
head(afriday)
df
table(df)
table(df$DayOfWeek)
m<c(3,2,4)
m<-c(3,2,4)
n<-c(1,2)
m*n
aqDF <- airquality
aqDF
##b##
head(aqDF,20)
aqDF[1]
aqDF[1,]
head(aqDF)
dim(aqDF)
aqDF[1:2,]
aqDF[1:20,]
dim(aqDF)
dim(aqDF)[1]
dim(aqDF)[1]-10
dim(aqDF)[1]-9
aqDF[dim(aqDF[1])-9:dim(aqDF[1]),]
aqDF[(dim(aqDF[1])-9),]
dim(aqDF)[1]
dim(aqDF)[1]
##the last row number##
dim(aqDF)[1]
##the last 10 number##
dim(aqDF)[1]-9
##the last 10 items##
aqDF[(dim(aqDF)[1]-9):dim(aqDF)[1],]
###c###
MphToKph <- function(mph){
return(mph*1.60934)
}
MphToKph(1)
MphToKph(2)
MphToKph <- function(mph){
return(mph*1.60934)
}
MphToKph(1)
# matrix multiplication in R - algebraic
> a %*% b
[,1] [,2]
[1,]   22   46
[2,]   34   74
> b %*% a
[,1] [,2]
[1,]   20   52
[2,]   28   76
TempFtoC <- function(Fahrenheit){
return((Fahrenheit-32)/1.8)
}
TempFtoC(32)
####question1####
a <- matrix(1:6, nrow = 2, ncol = 3, byrow = TRUE)
a
b <- matrix(7:12, nrow = 3, ncol = 2, byrow = TRUE)
b
a%*&b
a%*%b
for (i in 1:100) {
print(i)
}
10%%2
10%%3
for (i in 1:100) {
print(i)
if(i%%3==0){
print(Fizz)
}
if(i%%5==0){
print(Buzz)
}
if(i%%15==0){
print(FizzBuzz)
}
}
for (i in 1:100) {
print(i)
if(i%%3==0){
print("Fizz")
}
if(i%%5==0){
print("Buzz")
}
if(i%%15==0){
print("FizzBuzz")
}
}
for (i in 1:100) {
if(i%%3==0){
print("Fizz")
}
if(i%%5==0){
print("Buzz")
}
if(i%%15==0){
print("FizzBuzz")
}
else{
print(i)
}
}
####question2####
for (i in 1:100) {
if(i%%3==0){
print("Fizz")
break
}
if(i%%5==0){
print("Buzz")
break
}
if(i%%15==0){
print("FizzBuzz")
break
}
else{
print(i)
}
}
####question2####
for (i in 1:100) {
if(i%%3==0){
print("Fizz")
next
}
if(i%%5==0){
print("Buzz")
next
}
if(i%%15==0){
print("FizzBuzz")
next
}
else{
print(i)
next
}
}
for (i in 1:100) {
if(i%%15==0){
print("FizzBuzz")
next
}
if(i%%3==0){
print("Fizz")
next
}
if(i%%5==0){
print("Buzz")
next
}
else{
print(i)
next
}
}
aqDF$Wind
MphToKph(aqDF$Wind)
aqDF$Wind<-MphToKph(aqDF$Wind)
aqDF$Wind
MphToKph <- function(mph){
return(mph*1.60934)
}
aqDF$Wind<-MphToKph(aqDF$Wind)
###d###
TempFtoC <- function(Fahrenheit){
return((Fahrenheit-32)/1.8)
}
aqDF$Temp<-TempFtoC(aqDF$Temp)
aqDF
head(aqDF)
head(airquality)
a <- matrix(1:6, nrow = 2, ncol = 3, byrow = TRUE)
b <- matrix(7:12, nrow = 3, ncol = 2, byrow = TRUE)
a%*%b
####question2####
for (i in 1:100) {
if(i%%15==0){
print("FizzBuzz")
next
}
if(i%%3==0){
print("Fizz")
next
}
if(i%%5==0){
print("Buzz")
next
}
else{
print(i)
next
}
}
install.packages("streamgraph")
# Libraries
library(ggplot2)
library(dplyr)
library(plotly)
library(hrbrthemes)
# Load dataset from github
data <- read.table("https://raw.githubusercontent.com/holtzy/data_to_viz/master/Example_dataset/3_TwoNumOrdered.csv", header=T)
data$date <- as.Date(data$date)
# Usual area chart
p <- data %>%
ggplot( aes(x=date, y=value)) +
geom_area(fill="#69b3a2", alpha=0.5) +
geom_line(color="#69b3a2") +
ylab("bitcoin price ($)") +
theme_ipsum()
# Turn it interactive with ggplotly
p <- ggplotly(p)
p
# Libraries
library(ggplot2)
library(dplyr)
library(plotly)
library(hrbrthemes)
# Load dataset from github
data <- read.table("https://raw.githubusercontent.com/holtzy/data_to_viz/master/Example_dataset/3_TwoNumOrdered.csv", header=T)
data$date <- as.Date(data$date)
# Usual area chart
p <- data %>%
ggplot( aes(x=date, y=value)) +
geom_area(fill="#69b3a2", alpha=0.5) +
geom_line(color="#69b3a2") +
ylab("bitcoin price ($)") +
theme_ipsum()
# Turn it interactive with ggplotly
p <- ggplotly(p)
p
# save the widget
# library(htmlwidgets)
# saveWidget(p, file=paste0( getwd(), "/HtmlWidget/ggplotlyAreachart.html"))
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("dplyr")
install.packages("dplyr")
install.packages("plotly")
install.packages("hrbrthemes")
install.packages("hrbrthemes")
# Libraries
library(ggplot2)
library(dplyr)
library(plotly)
library(hrbrthemes)
# Load dataset from github
data <- read.table("https://raw.githubusercontent.com/holtzy/data_to_viz/master/Example_dataset/3_TwoNumOrdered.csv", header=T)
data$date <- as.Date(data$date)
# Usual area chart
p <- data %>%
ggplot( aes(x=date, y=value)) +
geom_area(fill="#69b3a2", alpha=0.5) +
geom_line(color="#69b3a2") +
ylab("bitcoin price ($)") +
theme_ipsum()
# Turn it interactive with ggplotly
p <- ggplotly(p)
p
# save the widget
# library(htmlwidgets)
# saveWidget(p, file=paste0( getwd(), "/HtmlWidget/ggplotlyAreachart.html"))
# Libraries
library(ggplot2)
library(dplyr)
library(plotly)
library(hrbrthemes)
# Load dataset from github
data <- read.table("https://raw.githubusercontent.com/holtzy/data_to_viz/master/Example_dataset/3_TwoNumOrdered.csv", header=T)
data$date <- as.Date(data$date)
# Usual area chart
p <- data %>%
ggplot( aes(x=date, y=value)) +
geom_area(fill="#69b3a2", alpha=1) +
geom_line(color="#69b3a2") +
ylab("bitcoin price ($)") +
theme_ipsum()
# Turn it interactive with ggplotly
p <- ggplotly(p)
p
# save the widget
# library(htmlwidgets)
# saveWidget(p, file=paste0( getwd(), "/HtmlWidget/ggplotlyAreachart.html"))
shiny::runApp('H:/Users/Double/R/Code/project')
runApp('H:/Users/Double/R/Code/project')
runApp('H:/Users/Double/R/Code/project')
runApp('H:/Users/Double/R/Code/project')
runApp('H:/Users/Double/R/Code/project')
runApp('H:/Users/Double/R/Code/project')
runApp('H:/Users/Double/R/Code/project')
runApp('H:/Users/Double/R/Code/project')
ui <- fluidPage(
titlePanel("Plotly"),
sidebarLayout(
sidebarPanel(),
mainPanel(
plotlyOutput("plot2"))))
runApp('H:/Users/Double/Desktop/hello.R')
install.packages("ggthemes")
runApp('H:/Users/Double/Desktop/hello.R')
runApp('H:/Users/Double/R/Code/project')
runApp('H:/Users/Double/Desktop/hello.R')
runApp('H:/Users/Double/Desktop/hello.R')
runApp('H:/Users/Double/Desktop/hello.R')
data <- read.csv("h:/LifeExpectancyData.csv")
data <- read.csv("h:/LifeExpectancyData.csv")
runApp('H:/Users/Double/Desktop/hello.R')
runApp('H:/Users/Double/Desktop/hello.R')
runApp('H:/Users/Double/Desktop/hello.R')
runApp('H:/Users/Double/Desktop/hello.R')
runApp('H:/Users/Double/Desktop/hello.R')
selectInput("typeOfCountry", "Select countries", countries),
data %>%
select(Country, Year, Life.expectancy ) %>%
filter(Country == input$typeOfCountry) %>%
data
input$typeOfCountry
library(shiny)
library(ggplot2)
library(ggthemes)
library(plotly)
library(hrbrthemes)
library(dplyr)
# Load dataset from github
data <- read.csv("h:/LifeExpectancyData.csv")
countries <- data$Country
random <- c(1:2938)
#data$date <- as.Date(data$date)
ui <- fluidPage(
titlePanel("Plotly"),
selectInput("typeOfCountry", "Select countries", countries),
sidebarLayout(
sidebarPanel(),
mainPanel(
plotlyOutput("plot2"))))
server <- function(input, output) {
output$plot2 <- renderPlotly({
# Usual area chart
p <- data %>%
select(Country, Year, Life.expectancy ) %>%
filter(Country == input$typeOfCountry) %>%
input
l;dsfdj
sdjflsakjfl
ui <- fluidPage(
titlePanel("Plotly"),
selectInput("typeOfCountry", "Select countries", countries),
sidebarLayout(
sidebarPanel(),
mainPanel(
plotlyOutput("plot2"))))
runApp('H:/Users/Double/Desktop/hello.R')
runApp('H:/Users/Double/Desktop/hello.R')
runApp('H:/Users/Double/Desktop/hello.R')
runApp('H:/Users/Double/Desktop/hello.R')
runApp('H:/Users/Double/Desktop/hello.R')
runApp('H:/Users/Double/Desktop/hello.R')
runApp('H:/Users/Double/Desktop/hello.R')
runApp('H:/Users/Double/Desktop/hello.R')
runApp('H:/Users/Double/Desktop/hello.R')
runApp('H:/Users/Double/Desktop/hello.R')
runApp('H:/Users/Double/Desktop/hello.R')
runApp('H:/Users/Double/Desktop/hello.R')
runApp('H:/Users/Double/Desktop/hello.R')
runApp('H:/Users/Double/Desktop/hello.R')
runApp('H:/Users/Double/Desktop/hello.R')
runApp('H:/Users/Double/Desktop/hello.R')
runApp('H:/Users/Double/Desktop/hello.R')
runApp('H:/Users/Double/Desktop/hello.R')
runApp('H:/Users/Double/Desktop/hello.R')
runApp('H:/Users/Double/Desktop/hello.R')
runApp('H:/Users/Double/Desktop/hello.R')
runApp('H:/Users/Double/Desktop/hello.R')
library(shiny); runApp('H:/Users/Double/Desktop/hello.R')
runApp('H:/Users/Double/Desktop/hello.R')
input$typeOfCountry
runApp('H:/Users/Double/Desktop/hello.R')
runApp('H:/Users/Double/Desktop/hello.R')
runApp('H:/Users/Double/Desktop/hello.R')
runApp('H:/Users/Double/WQD7001-GROUP-PROJECT')
install.packages("googleCharts")
runApp('H:/Users/Double/WQD7001-GROUP-PROJECT')
install.packages("googleCharts")
install.package('ggtheme')
install.packages("ggthem")
devtools::install_github("jcheng5/googleCharts")
install.packages("devtools")
devtools::install_github("jcheng5/googleCharts")
runApp('H:/Users/Double/WQD7001-GROUP-PROJECT')
install.packages("ggrepel")
runApp('H:/Users/Double/WQD7001-GROUP-PROJECT')
runApp('H:/Users/Double/WQD7001-GROUP-PROJECT')
shiny::runApp('H:/Users/Double/WQD7001-GROUP-PROJECT')
runApp('H:/Users/Double/WQD7001-GROUP-PROJECT')
shiny::runApp('H:/Users/Double/WQD7001-GROUP-PROJECT')
runApp('H:/Users/Double/WQD7001-GROUP-PROJECT')
runApp('H:/Users/Double/WQD7001-GROUP-PROJECT')
